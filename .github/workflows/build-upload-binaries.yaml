name: Build and Upload Binaries

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to upload binaries to (e.g. jito-bell-v0.1.0)'
        required: true
        type: string
      package_path:
        description: 'Path to the package'
        required: true
        default: 'jito-bell'
        type: string
      publish_release:
        description: 'Publish the release after uploading binaries'
        required: true
        default: true
        type: boolean

jobs:
  build-binaries:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: x86_64-unknown-linux-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            name: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: x86_64-pc-windows-msvc
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: refs/tags/${{ github.event.inputs.release_tag }}
      
      # Setup Rust for all builds
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      # Windows-specific setup
      - name: Setup Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Install protoc using a pre-built binary
          $ProtocVersion = "21.12"
          $ProtocZip = "protoc-$ProtocVersion-win64.zip"
          $ProtocUrl = "https://github.com/protocolbuffers/protobuf/releases/download/v$ProtocVersion/$ProtocZip"
          
          # Create a directory for protoc
          New-Item -ItemType Directory -Path "C:\protoc" -Force
          
          # Download protoc
          Invoke-WebRequest -Uri $ProtocUrl -OutFile "C:\protoc\$ProtocZip"
          
          # Extract protoc
          Expand-Archive -Path "C:\protoc\$ProtocZip" -DestinationPath "C:\protoc" -Force
          
          # Add protoc to PATH
          echo "C:\protoc\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Set environment variables
          echo "PROTOC=C:\protoc\bin\protoc.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PROTOC_INCLUDE=C:\protoc\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # Also install MSYS2 for any Unix-like tools needed
          choco install msys2 -y
      
      # Install OpenSSL on macOS
      - name: Install OpenSSL (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          
      # Setup OpenSSL on Windows with vcpkg
      - name: Install OpenSSL (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Install vcpkg if not already installed
          if (-not (Test-Path "C:\vcpkg")) {
            git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
            cd C:\vcpkg
            .\bootstrap-vcpkg.bat -disableMetrics
          }
          
          # Install OpenSSL
          C:\vcpkg\vcpkg install openssl:x64-windows-static
          
          # Set environment variables
          echo "OPENSSL_DIR=C:\vcpkg\installed\x64-windows-static" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "OPENSSL_STATIC=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKGRS_DYNAMIC=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      
      # Use cache for builds
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: "jito-bell-${{ matrix.target }}-${{ inputs.package_path }}-v5"

      - name: Extract crate name and version
        id: crate_info
        shell: bash
        run: |
          CRATE_NAME="${{ inputs.package_path }}"
          VERSION=$(grep -m1 'version =' ${{ inputs.package_path }}/Cargo.toml | cut -d '"' -f2)
          echo "crate_name=$CRATE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building $CRATE_NAME version $VERSION for ${{ matrix.target }}"
      
      # Use clux/muslrust Docker image for Linux MUSL build
      - name: Build Linux MUSL with Docker
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Run the build in Docker with muslrust
          docker run --rm -v $(pwd):/home/rust/src -w /home/rust/src clux/muslrust:stable cargo build --release --package ${{ inputs.package_path }}
          
          # List the target directory to debug the path
          echo "Listing target directories:"
          find ./target -name "${{ inputs.package_path }}" | grep -v debug
      
      # For Windows, use a much simpler build approach bypassing protobuf-src
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Set environment variables to use pre-installed protoc
          $env:PROTOC_NO_VENDOR = "1"
          
          # Force use of pre-installed protoc rather than trying to build it
          $env:PROTOBUF_SYS_NO_PKG_CONFIG = "1"
          
          # Set additional environment variables
          $env:VCPKGRS_TRIPLET = "x64-windows-static"
          
          # Build with Cargo
          cargo build --release --target ${{ matrix.target }} --package ${{ inputs.package_path }}
      
      # Regular build for macOS
      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --release --target ${{ matrix.ta